package com.developer.rjtech.resumebuilder.datamodel;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.VerticalPositionMark;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import static com.developer.rjtech.resumebuilder.datamodel.Academia.Graduate;


public class PdfHelper {
    private final Context mcontext;
    private final Document mdocument;
    private String mpath;

    private int titleLeading = 40;
    private int listIndent = 40;

    private Chunk bullet = new Chunk("~  ");

    private Paragraph space = new Paragraph();

    private Font childtextFont,childTitleFont,titleFont;

    public PdfHelper(Context context, Document document) {
        mcontext = context;
        mdocument = document;
    }

    public void createPdf(String path, String filename) throws FileNotFoundException, DocumentException {
        mpath = path;
        File dir, file;
        FileOutputStream fout;
        String fontSansita = "Sansita.ttf";

        try {
            dir = new File(mpath);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    Log.i("Storage", "Directory Creation Failed");
                }
            }
            file = new File(dir, filename);
            fout = new FileOutputStream(file);
            PdfWriter.getInstance(mdocument, fout);
            InputStream in = mcontext.getAssets().open("fonts/Sansita-Regular.ttf");
            File font = new File(mpath, fontSansita);
            OutputStream out = new FileOutputStream(font);
            byte[] buffer = new byte[1024];
            int read;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            in.close();
            out.flush();
            out.close();
            mdocument.setMargins(60, 40, 40, 60);
            mdocument.addTitle("Resume");
            mdocument.addAuthor("Naveen Bhardwaj");
            mdocument.addSubject("This Resume is generated by Resumia Android App");
            mdocument.addKeywords("Metadata, iText, PDF");
            mdocument.addCreator("Resumia Using iText");
            mdocument.open();
            space.setLeading(titleLeading);
            BaseFont sansita = BaseFont.createFont(path + "/" + fontSansita, BaseFont.WINANSI, BaseFont.EMBEDDED);
            childtextFont = new Font(sansita, 12);
            childTitleFont = new Font(sansita, 12, Font.BOLD);
            titleFont = new Font(sansita, 20, Font.BOLD);

            // Add Data to Pdf below This Line

            resumeTitle();
            resumeObjective();
            resumeSkills();
            resumeQualities();
            resumeAcademia();
            resumeExperience();
            resumeIntereset();
            resumeProfile();

            // Add Data to Pdf Above This Line
        } catch (IOException | DocumentException e) {
            e.printStackTrace();
        } finally {
            mdocument.close();
        }
    }

    public void viewPdf(String file) {
        File pdfFile = new File(mpath + "/" + file);
        Uri path = Uri.fromFile(pdfFile);

        Intent pdfIntent = new Intent(Intent.ACTION_VIEW);
        pdfIntent.setDataAndType(path, "application/pdf");
        pdfIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        try {
            mcontext.startActivity(pdfIntent);
        } catch (ActivityNotFoundException e) {
            Toast.makeText(mcontext, "Can't read Pdf File!", Toast.LENGTH_LONG).show();
        }
    }
    private void resumeTitle(){
        if (!TextUtils.isEmpty(Personalia.name)) {
            addText(Personalia.name, childtextFont);
        }
        if (!TextUtils.isEmpty(Personalia.email)) {
            addText("Email id: " + Personalia.email, childtextFont);
        }
        if (!TextUtils.isEmpty(Personalia.phone)) {
            addText("Contact: " + Personalia.phone, childtextFont);
        }
    }
    private void resumeObjective(){
        if (!TextUtils.isEmpty(Personalia.objective)) {
            addTitle("OBJECTIVE", titleFont);
            addText(Personalia.objective, childtextFont);
        }
    }
    private void resumeSkills(){
        if (TechSkillsData.techSkillsList.size() > 0) {
            addTitle("TECHNICAL SKILLS", titleFont);
            List skillList = new List(List.UNORDERED);
            skillList.setListSymbol(bullet);
            for (TechSkills skill : TechSkillsData.techSkillsList) {
                addlistTitle(skillList, skill.title + ": ", skill.subtitle, childTitleFont, childtextFont);
            }
            skillList.setIndentationLeft(listIndent);
            try {
                mdocument.add(space);
                mdocument.add(skillList);
            } catch (DocumentException e) {
                Log.i("PdfError", String.valueOf(e));
            }
        }
    }
    private void resumeQualities(){
        if (Qualities.qualities.size() > 0) {
            addTitle("PERSONAL QUALITIES", titleFont);
            addStringList(Qualities.qualities, childtextFont, bullet);
        }
    }
    private void resumeAcademia(){
        if ((Academia.PostGraduate != null) || (Graduate != null) || (Academia.Intermediate != null) || (Academia.School != null)) {
            addTitle("ACADEMIC QUALIFICATION", titleFont);
            java.util.List<String> academic = new ArrayList<>();
            if (Academia.PostGraduate != null) {
                academic.add(Academia.PostGraduate.title + " from " + Academia.PostGraduate.institue + ", " + Academia.PostGraduate.university + " (" + Academia.PostGraduate.year + ").");
            }
            if (Graduate != null) {
                academic.add(Graduate.title + " from " + Graduate.institue + ", " + Graduate.university + " (" + Graduate.year + ").");
            }
            if (Academia.Intermediate != null) {
                academic.add(Academia.Intermediate.title + " from " + Academia.Intermediate.institue + ", " + Academia.Intermediate.university + " (" + Academia.Intermediate.year + ").");
            }
            if (Academia.School != null) {
                academic.add(Academia.School.title + " from " + Academia.School.institue + ", " + Academia.School.university + " (" + Academia.School.year + ").");
            }
            addStringList(academic, childtextFont, bullet);
        }
    }
    private void resumeExperience(){
        if (Internships.internships.size() > 0) {
            addTitle("INDUSTRIAL TRAININGS", titleFont);
            for (int i = 0; i < Internships.internships.size(); ++i) {
                List trainingList = new List(List.UNORDERED);
                Chunk glue = new Chunk(new VerticalPositionMark());
                Paragraph tTitle = new Paragraph(Internships.internships.get(i).trainingTitle, childTitleFont);
                tTitle.add(new Chunk(glue));
                tTitle.add(Internships.internships.get(i).trainingDate);
                tTitle.setLeading(titleLeading-20);
                trainingList.add(new ListItem(tTitle));
                trainingList.setIndentationLeft(listIndent);
                Paragraph pTitle = new Paragraph(Internships.internships.get(i).pName + ":", childTitleFont);
                pTitle.setIndentationLeft(listIndent + 10);
                Paragraph pDetails = new Paragraph(Internships.internships.get(i).pDetails, childtextFont);
                pDetails.setIndentationLeft(listIndent + 15);
                try {
                    mdocument.add(trainingList);
                    mdocument.add(pTitle);
                    mdocument.add(pDetails);
                    mdocument.add(space);
                } catch (DocumentException e) {
                    Log.i("Training Resume",String.valueOf(e));
                }

            }
        }
    }
    private void resumeIntereset(){
        if (AoiData.interests.size() > 0) {
            addTitle("AREAS OF INTEREST", titleFont);
            addStringList(AoiData.interests, childtextFont, bullet);
        }
    }
    private void resumeProfile(){
        if (Personalia.address.length() > 0 || Personalia.dateOfBirth.length() > 0) {
            addTitle("PERSONAL PROFILE", titleFont);
            List personalList = new List(List.UNORDERED);
            addlistTitle(personalList, "Date Of Birth: ", Personalia.dateOfBirth, childTitleFont, childtextFont);
            addlistTitle(personalList, "Languages Known: ", "English & Hindi", childTitleFont, childtextFont);
            addlistTitle(personalList, "Address: ", Personalia.address, childTitleFont, childtextFont);
            personalList.setIndentationLeft(listIndent);
            personalList.setListSymbol(bullet);
            final Calendar calendar = Calendar.getInstance(Locale.getDefault());
            Date currentdate = calendar.getTime();
            SimpleDateFormat format = new SimpleDateFormat("dd MMM yyyy",Locale.getDefault());
            Paragraph date = new Paragraph("Dated: "+format.format(currentdate),childTitleFont);
            date.setAlignment(Paragraph.ALIGN_RIGHT);
            date.setIndentationRight(10);
            try {
                mdocument.add(personalList);
                mdocument.add(date);
            } catch (DocumentException e) {
                Log.i("Profile Resume",String.valueOf(e));
            }
        }
    }

    private void addTitle(String title, Font font) {
        Paragraph paragraph = new Paragraph(title, font);
        paragraph.setAlignment(Paragraph.ALIGN_CENTER);
        paragraph.setLeading(titleLeading);
        try {
            mdocument.add(paragraph);
            mdocument.add(space);
        } catch (DocumentException e) {
            Log.i("PdfError", String.valueOf(e));
        }
    }

    private void addText(String text, Font font) {
        Paragraph paragraph = new Paragraph(text, font);
        int paraLeading = 20;
        paragraph.setLeading(paraLeading);
        try {
            mdocument.add(paragraph);
        } catch (DocumentException e) {
            Log.i("PdfError", String.valueOf(e));
        }
    }

    private void addlistTitle(List list, String title, String subtitle, Font titlefont, Font subfont) {
        Chunk cTitle = new Chunk(title, titlefont);
        Chunk cSubtitle = new Chunk(subtitle, subfont);
        Paragraph paragraph = new Paragraph();
        paragraph.add(cTitle);
        paragraph.add(cSubtitle);
        list.add(new ListItem(paragraph));
    }

    private void addStringList(java.util.List<String> strings, Font font, Chunk bullet) {
        List list = new List(List.UNORDERED);
        list.setListSymbol(bullet);
        for (String s : strings) {
            list.add(new ListItem(s, font));
        }
        list.setIndentationLeft(listIndent);
        Paragraph space = new Paragraph();
        space.setLeading(titleLeading);
        try {
            mdocument.add(space);
            mdocument.add(list);
        } catch (DocumentException e) {
            Log.i("PdfError", String.valueOf(e));
        }
    }
}
